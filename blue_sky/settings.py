"""
Django settings for blue_sky project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

APP_PACKAGE = 'blue_sky'
UI_HOST = 'localhost'   # change to the hostname of your web server
UI_PORT = 9001
DATABASE_HOST = 'db' # change to database host if not running in docker

JOB_GRID_CLASS=None

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# THIS PATH IS FOR DOCKERIZED USE, REPLACE FOR NON-DOCKER USE
BASE_FILE_PATH='/home/blue_sky_user/work'

# /blue_sky/notebooks IS FOR DOCKERIZED USE, REPLACE FOR NON-DOCKER USE
NOTEBOOK_ARGUMENTS = [
    '--ip', '0.0.0.0',
    '--port', '8888',
    '--notebook-dir' ,
    '/blue_sky/notebooks'
]

# REPLACE THESE WITH THE PATHS ACCESSIBLE FROM PBS HPC CLUSTER
PBS_CONDA_HOME=''
PBS_PYTHONPATH=''
PBS_CONDA_ENV=''

FLOWER_MONITOR_URL='http://' + UI_HOST + ":" + str(UI_PORT) + '/flower/'
RABBIT_MONITOR_URL='http://' + UI_HOST + ":" + str(UI_PORT) + '/rabbitmq/'
NOTEBOOK_URL='http://' + UI_HOST + ':' + str(UI_PORT) + '/nb/'
STANBOL_URL='http://' + UI_HOST + ':' + str(UI_PORT) + '/stanbol/'

# /blue_sky/config IS FOR DOCKERIZED USE, REPLACE FOR NON-DOCKER USE
CONFIG_DIR = '/blue_sky/config'
BLUE_SKY_SETTINGS = '/blue_sky/config/blue_sky_settings.yml'
WORKFLOW_CONFIG_YAML = CONFIG_DIR + '/workflow_config.yml'

MOAB_HOST = 'http://qmaster2.corp.alleninstitute.org:8080'
MOAB_ENDPOINT = MOAB_HOST + '/mws/rest'
MOAB_AUTH = 'user:pass'
MOAB_GROUP = 'lab_b'
MOAB_TIMEOUT = 180

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'qde=#m)tepmm$!n1j3+b8#!mz_s-pn2@2soe@9^_ol8363pjlp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

RESULTS_PER_PAGE = 20

MAX_DISPLAYED_PAGE_LINKS = 10

WORKFLOW_VERSION = 0.1

MILLISECONDS_BETWEEN_REFRESH = 10000
# MILLISECONDS_BETWEEN_REFRESH = 1000
MOAB_CHECK_SECONDS = 45000.0
DASHBOARD_UPDATE_SECONDS = 60000.0

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'workflow_engine',
    'django_celery_results',
    'blue_sky',
    'django_extensions'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = APP_PACKAGE + '.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blue_sky.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'blue_sky',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': DATABASE_HOST,
        'PORT': 5432,
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'US/Pacific'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/static'
STATICFILES_DIRS = [
    os.path.join('/green/blue_sky', APP_PACKAGE, 'static')
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'detailed': {
            'class': 'logging.Formatter',
            'format': '%(asctime)s %(name)-15s %(levelname)-8s %(processName)-10s %(lineno)-5d %(message)s'
        }
    },    
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',
            'formatter': 'detailed',
            'stream': 'ext://sys.stdout'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'detailed',
            'filename': os.environ.get('DEBUG_LOG',
                                       'logs/debug.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'blue_sky': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'workflow_engine': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'celery.task': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': True,
        }
    }
}
